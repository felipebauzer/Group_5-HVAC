//SPDX-License-Identifier: GPL-3.0
// First 6 Exercises are not divided in order not to separate each row. //

pragma solidity >=0.5.0 <0.8.0;
contract Factory{
    uint idDigits =16;
    uint idModulus = 10^idDigits;

    struct Product{
    uint _id; // adding _ to name of values due to convention
    string _name; // adding _ to name of values due to convention
    }
    //creating a new public array
    Product[] public Products;
    
   /* function _createProduct(string memory _name, uint _id) private {

        Products.push(Product(string _name, uint _id));
    }*/

    //////////////////////////////////////////////////////////////////////////////

       //Exercise 7 //
       /*function _generateRandomId(string memory _str) private view
    returns (uint) {
                  
   }*/
    // Exercise 8 //
     function _generateRandomId(string memory _str) private view
    returns (uint) {
        uint rand = uint (keccak256(abi.encodePacked(_str)));
       return (rand%idModulus);
          
   }
   function _createRandomProduct(string memory _name) public
   {
      uint randID = _generateRandomId(_name);
       _createProduct(_name, randID);

   }
   
   // Exercise 9 //
   event NewProduct(uint ProductId, string name, uint id );

       function _createProduct(string memory _name, uint _id)
       private {
        Products.push(Product(string _name,_id));
        uint ProductId = (Products.length- 1);
        emit NewProduct(ProductId,_name,_id);
   }

   // Exercise 10 //
    mapping (uint => address) public productToOwner;
    mapping (address => uint) OwnerProductCount;

    // Exercise 11 //
    function Ownership () public {
    uint Productid = msg.sender[productToOwner];
    OwnerProductCount += msg.sender; 
    }

    //Exercise 12 //
      function getProductsByOwner (address _owner) external view

      returns(uint[] memory) {

          uint counter = 0;

          uint array = OwnerProductCount[_owner];

          uint[] memory result = new uint[] (array);

          for (uint i = 0; i< products.length; i++) {

              if (productToOwner[i]== _owner){

                  result[counter]= i;

                  counter++;

       }
    }
     return result;

   }

   // Exercise 14 //
   mapping (uint => uint) public age;

   modifier olderThan (uint _age, uint _userId)

   {

       require( _userId >= _age );

        _;

        }

        function validationUsers( uint _userId) public view olderThan(18,_userId) {

    }
}
